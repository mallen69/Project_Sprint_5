demo()
help()
Hershey()
heat.colors()
Japanese()
source('C:/Users/micha/Desktop/September 2017 DevLeague/Test for R.txt', encoding = 'UTF-8')
library(datasets)
library(RColorBrewer)
attach(iris)
library(datasets)
library(RColorBrewer)
attach(iris)
library(datasets)
library(RColorBrewer)
install.packages("library(RColorBrewer)")
attach(iris)
barplot(iris$Petal.Length, main = "Petal Length")
barplot(iris$Sepal.Length, main = "Sepal Length")
barplot(table(iris$Species,iris$Sepal.Length), col = brewer.pal(3,"Set1"), main = "Stacked Plot of Sepal Length by Species")
summary(iris[,1: 2])
summary(iris[,3: 4])
boxplot(iris$Sepal.Length, main = "Sepal Length")
boxplot(iris[,1: 4], names=c("SepL","SepW", "PetL", "PetW"))
boxplot(iris$Sepal.Length~iris$Species, col=heat.colors(3), main = "Sepal Length vs.Species")
plot(iris$Petal.Length, main="Petal Length", ylab = "Petal Length", xlab = "Species")
plot(iris$Petal.Length, main="Petal Length", ylab = "Petal Length", xlab = "Species")
ggplot2
hist(iris$Petal.Width, breaks=13)
hist(iris$Petal.Width, breaks=25)
b <- seq(min(iris$Petal.Width), max(iris$Petal.Width), length=11)
hist(iris$Petal.Width, breaks=b, xlab="Petal Width", main="Histogram of Petal Width")
dens.pw = density(iris$Petal.Width)
plot(dens.pw, ylab = "Frequency", xlab = "Width", main= "Petal Width Density")
dens.pw = density(iris$Petal.Length)
plot(dens.pw, ylab = "Frequency", xlab = "length", main= "Petal length Density")
ggplot
qqnorm(quantile.virginica, main="Virginica")
qqline(quantile.virginica)
qqnorm(quantile.virginica, main="Virginica")
qqline(quantile.virginica)
qqnorm(quantile.versicolor, main="Versicolor")
qqline(quantile.versicolor)
shapiro.test(quantile.setosa)
shapiro.test(quantile.versicolor)
data: quantile.versicolor
shapiro.test(quantile.versicolor)
data: quantile.versicolor
data: quantile.versicolor
hist(iris$Petal.Width, prob=TRUE, breaks=3)
hist(iris$Petal.Width, prob=TRUE, breaks=3)
lines(density(iris$Petal.Width))
hist(iris$Petal.Length, breaks=5, prob=TRUE)
hist(iris$Petal.Length, breaks=5, prob=TRUE)
lines(density(iris$Petal.Length))
hist(iris$Petal.Length, prob=TRUE)
hist(iris$Petal.Length, prob=TRUE)
lines(density(iris$Petal.Length))
qqnorm(cars$dist, main="Q-Q Plot distance", pch=20)
qqline(cars$dist)
qqnorm(cars$speed, main="Q-Q Plot speed", pch=20)
qqline(cars$speed)
shapiro.test(cars$dist)
shapiro.test(cars$speed)
getwd()
getwd()
michael <- 'docs.google.com/spreadsheets/d/1MTAfHE2KQ0zmFdTo7VywUCZW_Hl039UHxelgculBaxo/edit#gid=1617586725'
michael
nv<-
michael
nv
library(googlesheets)
gs_ls()
spreadsheet_names <- gs_ls()
spreadsheet_names
spreadsheet_names %>% glimpse()
(spreadsheet_names <- gs_ls())
spreadsheet_names %>% glimpse()
end_of_sprint_survey <- gs_title("End of Sprint Survey")
spreadsheet_names.title
spreadsheet_names <- as.data.frame(spreadsheet_names)
head(spreadsheet_names,23)
head(spreadsheet_names,10)
end_of_sprint_survey <- gs_title("End of Sprint Survey (Responses)")
end_of_sprint_survey_frame <- gs_title(spreadsheet_names.title[0])
end_of_sprint_survey
get()
getwd()
library(googlesheets)
spreadsheet_names
gs_read(ws = "End of Sprint Survey (Responses)")
gs_read(ss = "End of Sprint Survey (Responses)")
end_of_sprint_survey
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws =(Nominal worksheet extent as rows x columns))
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws ="(Nominal worksheet extent as rows x columns)")
gs_ws_ls(end_of_sprint_survey)
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws ="(Form Responses 1")
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws ="Form Responses 1")
end_of_sprint_survey
eoss_frame<- as.data.frame(end_of_sprint_survey)
eoss_frame
eoss_frame
end_of_sprint_survey
eoss_frame
eoss_frame
eoss_frame
eoss
updated_survey
eoss()
eoss_frame
plot(x,y, main = "Our first RR plot!", xlab = "Integers 1-5", ylab = "Integers 1 - 5 cubed")
library(datasets)
data(faithful)
plot(faithful)
barplot(table(painters$Expression), main="Expression Score")
library(datasets)eo
library(RColorBrewer)
shapiro.test(quantile.versicolor)
data: quantile.versicolor
getwd()
eoss <- 'docs.google.com/spreadsheets/d/1MTAfHE2KQ0zmFdTo7VywUCZW_Hl039UHxelgculBaxo/edit#gid=1617586725'
library(googlesheets)
eoss <- 'docs.google.com/spreadsheets/d/1MTAfHE2KQ0zmFdTo7VywUCZW_Hl039UHxelgculBaxo/edit#gid=1617586725'
gs_ls()
spreadsheet_names
spreadsheet_names <- gl_ls()
spreadsheet_names <- gs_ls()
end_of_sprint_survey
end_of_sprint_survey
travel <- docs.google.com/spreadsheets/d/1CSgMLhqqedFOR8mdTByz-amRIv2gAtj_LsScMt1mcVM/edit#gid=0
travel <- 'docs.google.com/spreadsheets/d/1CSgMLhqqedFOR8mdTByz-amRIv2gAtj_LsScMt1mcVM/edit#gid=0'
travel
gs_ls()
spreadsheet_names
Travel_Comp'_d_Time gs_title("Travel Comp' Time")
Travel_Comp'd_Time gs_title("Travel Comp'd Time")
Travel_Comp'd_Time gs_title <- ("Travel Comp'd Time")
Travel_Comp'd_Time <- gs_title ("Travel Comp'd Time")
gs_ls()
Newer_eocc <- gs_title("Newer End of Sprint Survery (Responses)")
Newer_eocc <- gs_title("Newer End of Sprint Survey (Responses)")
gs_ws_ls(Newer_eocc)
gs_ws_ls(Form Respones 1)
Newer_End_of_Sprint_Survey <- gs_read(ss=Newer_End_of_Sprint_Survey, ws ="Form Responses 1")
Newer_eocc <- gs_read(ss=Newer_End_of_Sprint_Survey, ws ="Form Responses 1")
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws ="Form Responses 1")
Newer_eocc <- gs_read(ss=Newer_eocc, ws ="Form Responses 1")
Newer_eocc
Newer_eocc
Newer_eocc
Newer_eocc
Newer_eocc <- gs_title("Newer End of Sprint Survey (Responses)")
Newer_eocc
Newer_eocc <- gs_read(ss=Newer_eocc, ws ="Form Responses 1")
Newer_eocc
gs_ls()
EOSSF <- gs_read(ss=EOSSF, ws ="Form Responses 1")
EOSSF <- gs_title("EOSSF")
EOSSF <- gs_read(ss=EOSSF, ws ="EOSSF")
EOSSF <- gs_read(ss=EOSSF, ws = "Form Responses 1")
EOSSF
EOSSF
gs_ls()
gs_ls()
Norman EOSS <- gs_title("Norman EOSS")
Norman_EOSS <- gs_title("Norman EOSS")
Norman_EOSS <- gs_title("Norman_EOSS")
EOSSF <- gs_title("EOSSF")
EOSSF <- gs_title("EOSSF Responses")
EOCCF
gs_read(ws = "End of Sprint Survey (Responses)")
gs_ls()
library(googlesheets)
gs_ls()
gs_read(ss = "Norman EOSS (Responses)")
Norman_EOSS
Norman_EOSS <- gs_title("Norman EOSS")
end_of_sprint_survey <- gs_read(ss=end_of_sprint_survey, ws ="Form Responses 1")
End_Of_Sprint_Survey <- gs_read(ss=end_of_sprint_survey, ws ="Form Responses 1")
library(googlesheets)
gs_ls()
spreadsheet_names <- gs_ls()
spreadsheet_names
end_of_sprint_survey
Newer End of Sprint Survey
Newer_End_of_Sprint_Survey
EOSSF
Norman EOSS
Norman_EOSS
eoss_frame
Norman_EOSS<- as.data.frame(Norman_EOSS)
gs_read(ss = "EOSS (Responses)")
Newer_eocc <- gs_title("Newer End of Sprint Survey (Responses)")
gs_ws_ls(Newer_eocc)
Newer_eocc <- gs_read(ss=Newer_eocc, ws ="Form Responses 1")
Newer_eocc
monday_norman <- 'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
monday_norman <- gs_title("Norman EOSS (Responses)")
gs_ws_ls(monday_norman)
monday_norman <- gs_read(ss=monday_norman, ws ="Form Responses 1")
monday_norman
library(googlesheets)
gs_ls()
EOSSF <- gs_title(EOSSF)
monday_EOSS <- gs_title(EOSSF)
monday_norman <- 'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
monday_norman <- gs_title("Norman EOSS (Responses)")
monday_norman <- gs_read(ss=monday_norman, ws ="Form Responses 1")
monday_norman
gs_ls()
end_of_sprint_survey
library(googlesheets)
gs_ls()
monday_norman <- 'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
monday_norman <- gs_title("Norman EOSS (Responses)")
monday_norman <- gs_read(ss=monday_norman, ws ="Form Responses 1")
monday_norman
gs_ls()
monday_norman <- 'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
monday_norman <- gs_title("Norman EOSS (Responses)")
monday_norman <- gs_read(ss=monday_norman, ws ="Form Responses 1")
monday_norman
library(googlesheets)
gs_ls()
Sprint_2 <- gs_title("Sprint_2_EOSS (Response")
Sprint_2 <- gs_title("Sprint_2_EOSS (Response)")
Sprint_2 <-  https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982
Sprint_2 <-  'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2 <- gs_read(ss=Sprint_2_EOSS, ws = "Form Responses 1")
Sprint_2
Sprint_2 <- gs_title("Sprint_2_EOSS (Responses)")
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(end_of_sprint_survey)
view(Sprint_2)
getwd()
library(googlesheets)
gs_ls()
Sprint_2 <-'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
Sprint_2 <- gs_title("Sprint_2_EOSS (Responses)")
gs_ws_ls(Sprint_2)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
getwd()
library(googlesheets)
gs_ls()
Sprint_2 <-'https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982'
Sprint_2 <- gs_title("Sprint_2_EOSS (Responses)")
gs_ws_ls(Sprint_2)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(Sprint_2)
save.image("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_2/R_Workspace_Reading_reading_a_google_sheet.RData")
getwd()
Install.packages(“googlesheets”)
library(googlesheets)
gs_ls()
Sprint_2 <-’https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982’
Sprint_2 <- gs_title(“Sprint_2_EOSS (Responses)”)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(Sprint_2)
getwd()
Install.packages(“googlesheets”)
library(googlesheets)
gs_ls()
Sprint_2 <-’https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982’
Sprint_2 <- gs_title(“Sprint_2_EOSS (Responses)”)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(Sprint_2)
getwd()
Install.packages(“googlesheets”)
library(googlesheets)
gs_ls()
Sprint_2 <-’https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982’
Sprint_2 <- gs_title(“Sprint_2_EOSS (Responses)”)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(Sprint_2)
getwd()
getwd()
Install.packages(“googlesheets”)
library(googlesheets)
gs_ls()
Sprint_2 <-’https://docs.google.com/spreadsheets/d/1Oze5HnI8jEVtKvhwt2LbO42Ec5ErHI6_IArt3sS7HxY/edit#gid=319180982’
Sprint_2 <- gs_title(“Sprint_2_EOSS (Responses)”)
Sprint_2 <- gs_read(ss=Sprint_2, ws = "Form Responses 1")
Sprint_2
View(Sprint_2)
View(Sprint_2)
View(Sprint_2)
View(monday_norman)
library()
# make some data
months <-rep(c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec"), 2)
chickens <-c(1, 2, 3, 3, 3, 4, 5, 4, 3, 4, 2, 2)
eggs <-c(0, 8, 10, 13, 16, 20, 25, 20, 18, 16, 10, 8)
values <-c(chickens, eggs)
type <-c(rep("chickens", 12), rep("eggs", 12))
mydata <-data.frame(months, values)
library(ggplot2)
p <-ggplot(mydata, aes(months, values))
p +geom_bar(stat = "identity")
View(mydata)
#The start of working with the US Contagious Diseases
#Setting my working Directory in order to be in the folder where the US_Contagious_Diseases is.
setwd("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/")
#Loading libraries and reading the CSV file "us_contagious_diseases into R.
#Loading the library dplyr in order for the
library(dplyr)
#Loading the library ggplot2
library(ggplot2)
#Loading the library plyr in order to use the ddply() function
library("plyr")
#loading library car as it may be used for the Anova Calculation
libary("car")
#Creating the variable "sick" to represent the ""us_contagious_diseases.csv""
#which was pulled from the Internet
sick <- read.csv("us_contagious_diseases.csv")
#This line of code gives me the list of all the different diseases
unique(sick$disease)
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.
#Also needed to do the na.rm=True in order for it to work
highest_percentage_sick <- max(sick$percentage_sick, na.rm = TRUE)
#Filter out all of the NA's for the percentage_sick
filter(sick, !is.na(percentage_sick))
#Create a new variable called "Sicker" that only has the percentage_sick values without any NA's
Sicker <- filter(sick, !is.na(percentage_sick))
#Calculate the top disease per State (by the highest percentage_sick)
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
For_Print_out_Highest_States <-States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the top disease per state (by the highest percentage_sick)
mean(States_highest_sick$percentage_sick)
#Calculate the Standard Deviation of the top disease per state (by the highest percentage_sick)
sd(States_highest_sick$percentage_sick)
#Calculate the Summary Statistics of the top disease per state (by the highest percentage_sick)
summary(States_highest_sick$percentage_sick)
#Create a varibable name of Hepatitis_A_Only which will be used to View/Calculate further only that disease
Hepatitis_A_Only <- subset(Sicker, disease == "Hepatitis A")
#Calculate the Hepatatis A disease per State (by the highest percentage_sick)
Hepatitis_A_States_highest <- ddply(Hepatitis_A_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Hepatatis_A disease per state (by the highest percentage_sick)
mean(Hepatitis_A_States_highest$percentage_sick)
#Create a varible name "Hep_A_Mean" to be used for output
Hep_A_Mean <- mean(Hepatitis_A_States_highest$percentage_sick)
#Create a varibable name of Measles_Only which will be used to View/Calculate further only that disease
Measles_Only <- subset(Sicker, disease == "Measles")
#Calculate the Measles disease per State (by the highest percentage_sick)
Measles_States_highest <- ddply(Measles_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Hepatatis_A disease per state (by the highest percentage_sick)
mean(Measles_States_highest$percentage_sick)
#Create a varible name "Measles_Mean" to be used for output
Measles_Mean <- mean(Measles_States_highest$percentage_sick)
#Create a varibable name of Mumps_Only which will be used to View/Calculate further only that disease
Mumps_Only <- subset(Sicker, disease == "Mumps")
#Calculate the Mumps disease per State (by the highest percentage_sick)
Mumps_States_highest <- ddply(Mumps_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Mumps disease per state (by the highest percentage_sick)
mean(Mumps_States_highest$percentage_sick)
#Create a varible name "Mumps_Mean" to be used for output
Mumps_Mean <- mean(Mumps_States_highest$percentage_sick)
#Create a varibable name of Pertussis_Only which will be used to View/Calculate further only that disease
Pertussis_Only <- subset(Sicker, disease == "Pertussis")
filter(Pertussis_Only, !is.na(weeks_reporting))
Pertussis_weeks_reporting <- filter(Pertussis_Only, !is.na(weeks_reporting))
filter(Pertussis_Only, !is.na(count))
Pertussis_count <- filter(Pertussis_Only, !is.na(count))
filter(Pertussis_Only, !is.na(percentage_sick))
Pertussis_percentage_sick <- filter(Pertussis_Only, !is.na(percentage_sick))
#Calculate the Pertussis disease per State (by the highest percentage_sick)
Pertussis_States_highest <- ddply(Pertussis_percentage_sick, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Pertussis disease per state (by the highest percentage_sick)
mean(Pertussis_States_highest$percentage_sick)
#Create a varible name "Pertussis_Mean" to be used for output
Pertussis_Mean <- mean(Pertussis_States_highest$percentage_sick)
#Create a varibable name of Polio_Only which will be used to View/Calculate further only that disease
Polio_Only <- subset(Sicker, disease == "Polio")
#Calculate the Polio disease per State (by the highest percentage_sick)
Polio_States_highest <- ddply(Polio_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Polio disease per state (by the highest percentage_sick)
mean(Polio_States_highest$percentage_sick)
#Create a varible name "Pertussis_Mean" to be used for output
Polio_Mean <- mean(Polio_States_highest$percentage_sick)
#Create a varibable name of Rubella_Only which will be used to View/Calculate further only that disease
Rubella_Only <- subset(sick, disease == "Rubella")
#Calculate the Rubella disease per State (by the highest percentage_sick)
Rubella_States_highest <- ddply(Rubella_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Rubella disease per state (by the highest percentage_sick)
mean(Rubella_States_highest$percentage_sick)
#Create a varible name "Rubella_Mean" to be used for output
Rubella_Mean <- mean(Rubella_States_highest$percentage_sick)
#Create a varibable name of Smallpox_Only which will be used to View/Calculate further only that disease
Smallpox_Only <- subset(Sicker, disease == "Smallpox")
filter(Smallpox_Only, !is.na(weeks_reporting))
Smallpox_weeks_reporting <- filter(Smallpox_Only, !is.na(weeks_reporting))
filter(Smallpox_Only, !is.na(count))
Smallpox_count <- filter(Smallpox_Only, !is.na(count))
filter(Smallpox_Only, !is.na(population))
Smallpox_population <- filter(Smallpox_Only, !is.na(count))
Smallpox_percentage_sick <- filter(Smallpox_Only, !is.na(percentage_sick))
#Calculate the Smallpox disease per State (by the highest percentage_sick)
Smallpox_States_highest <- ddply(Smallpox_Only, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#Calculate the mean of the highest Smallpox disease per state (by the highest percentage_sick)
mean(Smallpox_States_highest$percentage_sick)
#Create a varible name "Smallpox_Mean" to be used for output
Smallpox_Mean <- mean(Smallpox_States_highest$percentage_sick)
#View the top disease per State and show the percentage_sick
#View(States_highest_sick)
#Creating a table that shows all the Highest_Mean per Disease lined up
Total_Highest_Mean <- cbind(Hep_A_Mean, Measles_Mean, Mumps_Mean, Pertussis_Mean, Polio_Mean, Rubella_Mean, Smallpox_Mean)
View(Total_Highest_Mean)
Combined_PDF = "C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/Combined_PDF.pdf"
pdf(file = Combined_PDF)
#Creating the labels which will be at the bottom of the Highest Mean Score for the bar graphs
labels <- list('Hepatitis_A', 'Measles', 'Mumps', 'Pertussis', 'Polio', 'Rubella', 'Smallpox')
#Creating the barplot
barplot(Total_Highest_Mean,names.arg=labels, beside = TRUE,col = "turquoise", border= "red", main="Highest_Mean_Per_Disease",ylab="Mean",las=2)
#aov(dependent~as.factor(independent1) * as.factor(independent2) ,data=filename)
#The below line did something useful...!!!
#aov(percentage_sick~as.factor(state)* as.factor(disease),data = Sicker)
#aov(percentage_sick~as.factor(disease)* as.factor(state),data = Sicker)
#aov(percentage_sick~as.factor(state)* as.factor(disease),data = Sicker)
dev.off()
#This is writing a PDF file called Total_Highest_Mean to my folder and displaying it on my screen
dev.print(pdf, 'Total_Highest_Mean.pdf')
#dev.print(pdf, 'For_Print_out_Highest_States.pdf')
