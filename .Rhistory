names(Aug_2016)[30] <- "Learned"
#Renaming thirty first Column to Learned_Comment
names(Aug_2016)[31] <- "Learned_Comment"
#Renaming thirty second Column to Recommend_Class
names(Aug_2016)[32] <- "Recommend_Class"
#Renaming thirty third Column to Recommend_Comments
names(Aug_2016)[33] <- "Recommend_Comments"
#Renaming thirty fourth Column to Feedback
names(Aug_2016)[34] <- "Feedback"
#Changing the Column "Lecture" Character String Answers to Numerical Values for future Statiscal Analysis
#Strong Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Lecture <- gsub('Strongly Agree', '40', Aug_2016$Lecture)
Aug_2016$Lecture <- gsub('Strongly Disagree', '10', Aug_2016$Lecture)
Aug_2016$Lecture <- gsub('Disagree', '20', Aug_2016$Lecture)
Aug_2016$Lecture <- gsub('Agree', '30', Aug_2016$Lecture)
#Changing the Column "Responsive" Character String Answers to Numerical Values for future Statistical Analysis
#Strong Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Responsive <- gsub('Strongly Agree', '40', Aug_2016$Responsive)
Aug_2016$Responsive <- gsub('Strongly Disagree', '10', Aug_2016$Responsive)
Aug_2016$Responsive <- gsub('Disagree', '20', Aug_2016$Responsive)
Aug_2016$Responsive <- gsub('Agree', '30', Aug_2016$Responsive)
#Changing the Column "Guide" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Guide <- gsub('Strongly Agree', '40', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Strongly Disagree', '10', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Disagree', '20', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Agree', '30', Aug_2016$Guide)
#Changing the Column "Guide" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Guide <- gsub('Strongly Agree', '40', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Strongly Disagree', '10', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Disagree', '20', Aug_2016$Guide)
Aug_2016$Guide <- gsub('Agree', '30', Aug_2016$Guide)
#Changing the Column "Labs" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Labs <- gsub('Strongly Agree', '40', Aug_2016$Labs)
Aug_2016$Labs <- gsub('Strongly Disagree', '10', Aug_2016$Labs)
Aug_2016$Labs <- gsub('Disagree', '20', Aug_2016$Labs)
Aug_2016$Labs <- gsub('Agree', '30', Aug_2016$Labs)
#Changing the Column "Classroom" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Classroom <- gsub('Strongly Agree', '40', Aug_2016$Classroom)
Aug_2016$Classroom <- gsub('Strongly Disagree', '10', Aug_2016$Classroom)
Aug_2016$Classroom <- gsub('Disagree', '20', Aug_2016$Classroom)
Aug_2016$Classroom <- gsub('Agree', '30', Aug_2016$Classroom)
#Changing the Column "Computer" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Computer <- gsub('Strongly Agree', '40', Aug_2016$Computer)
Aug_2016$Computer <- gsub('Strongly Disagree', '10', Aug_2016$Computer)
Aug_2016$Computer <- gsub('Disagree', '20', Aug_2016$Computer)
Aug_2016$Computer <- gsub('Agree', '30', Aug_2016$Computer)
#Changing the Column "Network" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Network <- gsub('Strongly Agree', '40', Aug_2016$Network)
Aug_2016$Network <- gsub('Strongly Disagree', '10', Aug_2016$Network)
Aug_2016$Network <- gsub('Disagree', '20', Aug_2016$Network)
Aug_2016$Network <- gsub('Agree', '30', Aug_2016$Network)
#Changing the Column "See_Hear" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$See_Hear <- gsub('Strongly Agree', '40', Aug_2016$See_Hear)
Aug_2016$See_Hear <- gsub('Strongly Disagree', '10', Aug_2016$See_Hear)
Aug_2016$See_Hear <- gsub('Disagree', '20', Aug_2016$See_Hear)
Aug_2016$See_Hear <- gsub('Agree', '30', Aug_2016$See_Hear)
#Changing the Column "Had_Skills" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Had_Skills <- gsub('Strongly Agree', '40', Aug_2016$Had_Skills)
Aug_2016$Had_Skills <- gsub('Strongly Disagree', '10', Aug_2016$Had_Skills)
Aug_2016$Had_Skills <- gsub('Disagree', '20', Aug_2016$Had_Skills)
Aug_2016$Had_Skills <- gsub('Agree', '30', Aug_2016$Had_Skills)
#Changing the Column "Learned" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Learned <- gsub('Strongly Agree', '40', Aug_2016$Learned)
Aug_2016$Learned <- gsub('Strongly Disagree', '10', Aug_2016$Learned)
Aug_2016$Learned <- gsub('Disagree', '20', Aug_2016$Learned)
Aug_2016$Learned <- gsub('Agree', '30', Aug_2016$Learned)
#Changing the Column "Details" Character String Answers to Numerical Values for future Statistical Analysis
#Strongly Agree = 40
#Agree = 30
#Disagree = 20
#Strongly Disagree = 10
Aug_2016$Details <- gsub('Strongly Agree', '40', Aug_2016$Details)
Aug_2016$Details <- gsub('Strongly Disagree', '10', Aug_2016$Details)
Aug_2016$Details <- gsub('Disagree', '20', Aug_2016$Details)
Aug_2016$Details <- gsub('Agree', '30', Aug_2016$Details)
#Changing the Character String Column "Lecture" to Numeric
Aug_2016$Lecture <- as.numeric(as.character(Aug_2016$Lecture))
#Changing the Character String Column "Responsive" to Numeric
Aug_2016$Responsive <- as.numeric(as.character(Aug_2016$Responsive))
#Changing the Character String Column "Guide" to Numeric
Aug_2016$Guide <- as.numeric(as.character(Aug_2016$Guide))
#Changing the Character String Column "Labs" to Numeric
Aug_2016$Labs <- as.numeric(as.character(Aug_2016$Labs))
#Changing the Character String Column "Classroom" to Numeric
Aug_2016$Classroom <- as.numeric(as.character(Aug_2016$Classroom))
#Changing the Character String Column "Computer" to Numeric
Aug_2016$Computer <- as.numeric(as.character(Aug_2016$Computer))
#Changing the Character String Column "Network" to Numeric
Aug_2016$Network <- as.numeric(as.character(Aug_2016$Network))
#Changing the Character String Column "See_Hear" to Numeric
Aug_2016$See_Hear <- as.numeric(as.character(Aug_2016$See_Hear))
#Changing the Character String Column "Had_Skills" to Numeric
Aug_2016$Had_Skills <- as.numeric(as.character(Aug_2016$Had_Skills))
#Changing the Character String Column "Learned" to Numeric
Aug_2016$Learned <- as.numeric(as.character(Aug_2016$Learned))
#Changing the Character String Column "Details" to Numeric
Aug_2016$Details <- as.numeric(as.character(Aug_2016$Details))
#Deleting the first row since it does not provide any useful data
Aug_2016 = Aug_2016[-1,]
#Calculate the Mean of the Lecture Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Lecture,na.rm = TRUE)
#Calculate the Mean of the Responsive Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Responsive,na.rm = TRUE)
#Calculate the Mean of the Guide Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Guide,na.rm = TRUE)
#Calculate the Mean of the Labs Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Labs,na.rm = TRUE)
#Calculate the Mean of the Classroom Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Classroom,na.rm = TRUE)
#Calculate the Mean of the Computer Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Computer,na.rm = TRUE)
#Calculate the Mean of the Network Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Network,na.rm = TRUE)
#Calculate the Mean of the See_Hear Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$See_Hear,na.rm = TRUE)
#Calculate the Mean of the Had_Skills Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Had_Skills,na.rm = TRUE)
#Calculate the Mean of the Learned Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Learned,na.rm = TRUE)
#Calculate the Mean of the Details Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
mean(Aug_2016$Details,na.rm = TRUE)
#Creating variable name "MPLS_Lecture"  (Mean Perceived Learning Score)
Lecture <- mean(Aug_2016$Lecture,na.rm = TRUE)
#Creating variable name "MPLS_Responsive"  (Mean Perceived Learning Score)
Responsive <- mean(Aug_2016$Responsive,na.rm = TRUE)
#Creating variable name "MPLS_Guide"  (Mean Perceived Learning Score)
Guide <- mean(Aug_2016$Guide,na.rm = TRUE)
#Creating variable name "MPLS_Labs"  (Mean Perceived Learning Score)
Labs <- mean(Aug_2016$Labs,na.rm = TRUE)
#Creating variable name "MPLS_Classroom"  (Mean Perceived Learning Score)
Classroom <- mean(Aug_2016$Classroom,na.rm = TRUE)
#Creating variable name "MPLS_Computer"  (Mean Perceived Learning Score)
Computer <- mean(Aug_2016$Computer,na.rm = TRUE)
#Creating variable name "MPLS_Network"  (Mean Perceived Learning Score)
Network <- mean(Aug_2016$Network,na.rm = TRUE)
#Creating variable name "MPLS_See_Hear"  (Mean Perceived Learning Score)
See_Hear <- mean(Aug_2016$See_Hear,na.rm = TRUE)
#Creating variable name "MPLS_Had_Skills"  (Mean Perceived Learning Score)
Had_Skills <- mean(Aug_2016$Had_Skills,na.rm = TRUE)
#Creating variable name "MPLS_Learned"  (Mean Perceived Learning Score)
Learned <- mean(Aug_2016$Learned,na.rm = TRUE)
#Creating variable name "MPLS_Details"  (Mean Perceived Learning Score)
Details <- mean(Aug_2016$Details,na.rm = TRUE)
#Calculate the Standard Deviation of the Lecture Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Lecture,na.rm = TRUE)
#Calculate the Standard Deviation of the Responsive Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Responsive,na.rm = TRUE)
#Calculate the Standard Deviation of the Guide Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Guide,na.rm = TRUE)
#Calculate the Standard Deviation  of the Labs Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Labs,na.rm = TRUE)
#Calculate the Standard Deviation of the Classroom Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Classroom,na.rm = TRUE)
#Calculate the Standard Deviation of the Computer Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Computer,na.rm = TRUE)
#Calculate the Standard Deviation of the Network Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Network,na.rm = TRUE)
#Calculate the Standard Deviation of the See_Hear Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$See_Hear,na.rm = TRUE)
#Calculate the Standard Deviation of the Had_Skills Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Had_Skills,na.rm = TRUE)
#Calculate the Standard Deviation of the Learned Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Learned,na.rm = TRUE)
#Calculate the Standard Deviation of the Details Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
sd(Aug_2016$Details,na.rm = TRUE)
#Creating variable name "SD_Lecture"  (Standard Deviation Lecture)
SD_Lecture <- sd(Aug_2016$Lecture,na.rm = TRUE)
#Creating variable name "SD_Responsive"  (Standard Deviation Responsive)
SD_Responsive <- sd(Aug_2016$Responsive,na.rm = TRUE)
#Creating variable name "SD_Guide"  (Standard Deviation Guide)
SD_Guide <- sd(Aug_2016$Guide,na.rm = TRUE)
#Creating variable name "SD_Labs"  (Standard Deviation Labs)
SD_Labs <- sd(Aug_2016$Labs,na.rm = TRUE)
#Creating variable name "SD_Classroom"  (Standard Deviation Classroom)
SD_Classroom <- sd(Aug_2016$Classroom,na.rm = TRUE)
#Creating variable name "SD_Computer"  (Standard Deviation Computer)
SD_Computer <- sd(Aug_2016$Computer,na.rm = TRUE)
#Creating variable name "SD_Network"  (Standard Deviation Computer)
SD_Network <- sd(Aug_2016$Network,na.rm = TRUE)
#Creating variable name "SD_See_Hear"  (Standard Deviation See_Hear)
SD_See_Hear <- sd(Aug_2016$See_Hear,na.rm = TRUE)
#Creating variable name "SD_Had_Skills"  (Standard Deviation Had_Skills)
SD_Had_Skills <- sd(Aug_2016$Had_Skills,na.rm = TRUE)
#Creating variable name "SD_Learned"  (Standard Deviation Learned)
SD_Learned <- sd(Aug_2016$Learned,na.rm = TRUE)
#Creating variable name "SD_Details"  (Standard Deviation Details)
SD_Details <- sd(Aug_2016$Details,na.rm = TRUE)
#Create a new data.set named "SD_Analysis_Aug_2016" which can then be used to output all of the Standard Deviation Scores for each column
SD_Analysis_Aug_2016 <- rbind(Aug_2016$Lecture,data.frame(SD_Lecture, SD_Responsive, SD_Guide, SD_Labs,
SD_Classroom,SD_Computer,SD_Network,SD_See_Hear,SD_Had_Skills, SD_Learned, SD_Details))
#Rename my SD Columns to straight without the SD (example original was "SD_Lecture" - renamed to "Lecture") so it lines up correctly with the original column names
SD_Analysis_Aug_2016 <- setNames(SD_Analysis_Aug_2016, c("Lecture","Responsive","Guide", "Labs", "Classroom", "Computer",
"Network", "See_Hear", "Had_Skills", "Learned", "Details"))
#Create a new data.set named "Mean_Analysis_Aug_2016" which can then be used to output all of the Mean Scores for each column
Mean_Analysis_Aug_2016 <- rbind(Aug_2016$Lecture,data.frame(Lecture, Responsive, Guide, Labs,Classroom,Computer,Network,See_Hear,Had_Skills, Learned, Details))
#I believe this sets all my columns to numeric with the sapply function
MPLS_Scores <- Aug_2016[sapply(Aug_2016, is.numeric)]
#bind the rows together - essentially read the three different datasets into one file - this does need the dplyr package loaded prior.
Total_MPLS_Mean_SD_Aug_2016 <- bind_rows(MPLS_Scores,Mean_Analysis_Aug_2016,SD_Analysis_Aug_2016)
#Write the cleaned and total Calculated SD_MPLS (Standard Deviation Mean Perceived Learning Score) Data from R back to a CSV File (SD_MPLS_August_2016)
write.csv(Total_MPLS_Mean_SD_Aug_2016, "Total_MPLS_Mean_SD_Aug_2016.csv")
#Round the Column Mean answers to two digits
round(Column_mean, digits = 2)
#Calculate the mean for each and every column
Column_mean <- sapply(MPLS_Scores,mean,na.rm=TRUE)
#Round the Column Mean answers to two digits
round(Column_mean, digits = 2)
Rounded_Mean <- round(Column_mean, digits = 2)
#Calculate the standard deviation for each and every column
Column_SD <- sapply(MPLS_Scores,sd,na.rm=TRUE)
##Bind the Column_mean and Columm_SD rows together
bind_rows(Rounded_Mean,Column_SD,)
#Assign the variable name Summary_stats to the two combined rows (Column_mean & Column_SD)
New_Summary_stats <- bind_rows(Rounded_Mean,Column_SD)
#For the first two rows give the title of Mean and Standard_Dev to those two row names
rownames(New_Summary_stats) <- c("Mean", "Standard_Dev")
#View the Summary_stats which should show on the R panel the Calculated Mean and Standard
#Deviation for all of the Columns with the Mean and Standard_Dev as row names as well
#Removing the Column Headers and just outputing the Mean on Each Column
unname(unlist(Rounded_Mean))
#Removing the Column Headers and just outputing the Standard Deviation on Each Column
unname(unlist(Column_SD))
View(New_Summary_stats)
#This will plot the Standard Deviation from each Column (question)
#Though I have it commented out at the moment
#barplot(Column_SD)
#This will make the Barplot for Column_mean
# colored dark green:  col="darkgreen"
#with a border of red:
#with the MPLS_Scores labeled as the Title on the top: main="MPLS_Scores"
#with the Y Axis (vertical) measurement columns displaying from 0 to 40 (limits for the y axis): ylim = c(0, 40)
#Creating the labels which will be at the bottom of the Standard Deviation and MPLS_Scores for the bar graphs
labels <- list('Lecture', 'Responsive', 'Guide', 'Labs', 'Classroom', 'Computer', 'Network', 'See_Hear', 'Had_Skills', 'Learned', 'Details')
#Trying to get the actual values to appear on the top of the bar for the Mean
Mean_Values = c(37.15, 38.02, 34.88, 35.51, 33.55, 35.35 ,35.26, 36.62, 33.46, 33.67, 34.00)
#Trying to get the actual values to appear on the top of the bar for the Standard Deviation
Standard_Dev_Values = c(4.88, 4.19, 5.57, 5.43, 5.68, 5.60, 5.60, 4.87, 5.70, 5.64, 5.60)
#Creating the Standard Deviation (Column_SD) bar graph from all columns (Questions)
barplot(height=Column_SD, names.arg=labels, beside = TRUE, col="darkgreen", border = "red", main="Standard_Deviation", ylab="STD", las=2, ylim = c(0, 7))
#Putting this code in to be able to save the barplot and possibly other things
Revised_Barplot_SD <- barplot(height=Column_SD, names.arg=labels, beside = TRUE, col="darkgreen", border = "red", main="Standard_Deviation", ylab="STD", las=2, srt=45, adj = 1,xpd = TRUE,ylim = c(0, 7))
#This sets the row heights for the barplot from 0 to 6
#ylim = c(0, 6)
#This labels the barplot with Standard_Deviation as the title & STD on the Y Axis
#las=2 This makes the labels of the bar graph go vertical
#Creating the MPLS_Scores (Column_mean) bar graph from all columns (Questions)
barplot(height=Column_mean, names.arg=labels, beside = TRUE, col="orange", border = "green",
main="MPLS_Scores", ylab="Mean", las=2, ylim = c(0, 46))
#Putting this code in to be able to save the barplot and possibly other things
Revised_barplot_Mean <- barplot(height=Column_mean, names.arg=labels, beside = TRUE, col="orange",
border = "green", main="MPLS_Scores", ylab="Mean", las=2, ylim = c(0, 46))
#This labels the barplot with MPLS_Scores as the title & Mean on the Y Axis
#This sets the row heights for the barplot from 0 to 40
#ylim = c(0, 40)
#las=2 This makes the labels of the bar graph go vertical
#Creating the Standard Deviation (Column_SD) bar graph from all columns (Questions)
barplot(height=Column_SD, names.arg=labels, beside = TRUE, col="darkgreen", border = "red", main="Standard_Deviation", ylab="STD", las=2, ylim = c(0, 7))
#Creating the MPLS_Scores (Column_mean) bar graph from all columns (Questions)
barplot(height=Column_mean, names.arg=labels, beside = TRUE, col="red", border = "green",
main="MPLS_Scores", ylab="Mean", las=2, ylim = c(0, 46))
Combined_PDF = "C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_4/Combined_PDF.pdf"
pdf(file = Combined_PDF)
#Creating the labels which will be at the bottom of the Standard Deviation and MPLS_Scores for the bar graphs
labels <- list('Lecture', 'Responsive', 'Guide', 'Labs', 'Classroom',
'Computer', 'Network', 'See_Hear', 'Had_Skills', 'Learned', 'Details')
labels_SD <- list('Lecture', 'Responsive', 'Guide', 'Labs', 'Classroom', 'Computer', 'Network',
'See_Hear', 'Had_Skills', 'Learned', 'Details')
#Putting this code in to be able to save the barplot and possibly other things
Revised_barplot_Mean <- barplot(height=Column_mean, names.arg=labels, beside = TRUE, col="orange",
border = "red", main="MPLS_Scores", ylab="Mean", las=2, ylim = c(0, 46))
text(Revised_barplot_Mean, Column_mean, labels = Mean_Values,pos=3, offset=.5)
#Putting this code in to be able to save the barplot and possibly other things
#This sets the row heights for the barplot from 0 to 6
#ylim = c(0, 6)
#This labels the barplot with Standard_Deviation as the title & STD on the Y Axis
#las=2 This makes the labels of the bar graph go vertical
Revised_Barplot_SD <- barplot(height=Column_SD, names.arg=labels_SD, beside = TRUE, col="turquoise",
border = "red", main="Standard_Deviation", ylab="STD", las=2 ,ylim = c(0, 7))
text(Revised_Barplot_SD, Column_SD, labels = Standard_Dev_Values, pos=3, offset = .5)
dev.off()
#This is writing a PDF file called Revised_Bar_Plot_Mean to my folder and displaying it on my screen
dev.print(pdf, 'Revised_Barplot_Mean.pdf')
#This is writing a PDF file called Revised_Bar_Plot_SD to my folder and displaying it (quickly) on my screen
dev.print(pdf, 'Revised_Barplot_SD.pdf')
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.  Also needed to do the na.rm=True
#in order for it to work.
filter(sick, !is.na(percentage_sick))
Sicker <- filter(sick, !is.na(percentage_sick))
#In order to give me the highest percentage_sick for each state, still need to now figure                              #out how to get the rest of the columns back
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
View(States_highest_sick)
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.  Also needed to do the na.rm=True
#in order for it to work.
filter(sick, !is.na(percentage_sick))
Sicker <- filter(sick, !is.na(percentage_sick))
#In order to give me the highest percentage_sick for each state, still need to now figure                              #out how to get the rest of the columns back
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
View(States_highest_sick)
#The start of working with the US Contagious Diseases
#Setting my working Directory in order to be in the folder where the US_Contagious_Diseases is.
setwd("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/")
#Loading libraries and reading the CSV file "us_contagious_diseases into R.
#Loading the library dplyr in order for the
library(dplyr)
#Loading the library ggplot2
library(ggplot2)
#Loading the library plyr in order to use the ddply() function
library("plyr")
#Creating the variable "sick" to represent the ""us_contagious_diseases.csv""
#which was pulled from the Internet
sick <- read.csv("us_contagious_diseases.csv")
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.  Also needed to do the na.rm=True
#in order for it to work.
filter(sick, !is.na(percentage_sick))
Sicker <- filter(sick, !is.na(percentage_sick))
#In order to give me the highest percentage_sick for each state, still need to now figure                              #out how to get the rest of the columns back
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#The start of working with the US Contagious Diseases
#Setting my working Directory in order to be in the folder where the US_Contagious_Diseases is.
setwd("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/")
#Loading libraries and reading the CSV file "us_contagious_diseases into R.
#Loading the library dplyr in order for the
library(dplyr)
#Loading the library ggplot2
library(ggplot2)
#Loading the library plyr in order to use the ddply() function
library("plyr")
#Creating the variable "sick" to represent the ""us_contagious_diseases.csv""
#which was pulled from the Internet
sick <- read.csv("us_contagious_diseases.csv")
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.  Also needed to do the na.rm=True
#in order for it to work.
filter(sick, !is.na(percentage_sick))
Sicker <- filter(sick, !is.na(percentage_sick))
#In order to give me the highest percentage_sick for each state, still need to now figure                              #out how to get the rest of the columns back
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
View(States_highest_sick)
#The start of working with the US Contagious Diseases
#Setting my working Directory in order to be in the folder where the US_Contagious_Diseases is.
setwd("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/")
#Loading libraries and reading the CSV file "us_contagious_diseases into R.
#Loading the library dplyr in order for the
library(dplyr)
#Loading the library ggplot2
library(ggplot2)
#Loading the library plyr in order to use the ddply() function
library("plyr")
#Creating the variable "sick" to represent the ""us_contagious_diseases.csv""
#which was pulled from the Internet
sick <- read.csv("us_contagious_diseases.csv")
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.
#Also needed to do the na.rm=True in order for it to work
#Filter out all of the NA's for the percentage_sick
filter(sick, !is.na(percentage_sick))
#Create a new variable called "Sicker" that only has the percentage_sick values without any NA's
Sicker <- filter(sick, !is.na(percentage_sick))
#Calculate the top disease per State (by the highest percentage_sick)
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#View the top disease per State and show the percentage_sick
View(States_highest_sick)
highest_year <- max(sick$year)
View(highest_year)
str(highest_count)
highest_percentage_sick <- max(sick$percentage_sick, na.rm = TRUE)
str(highest_percentage_sick)
print(highest_percentage_sick)
View(highest_percentage_sick)
#The start of working with the US Contagious Diseases
#Setting my working Directory in order to be in the folder where the US_Contagious_Diseases is.
setwd("C:/Users/micha/Desktop/DevLeague Begins Nov 7 2017/Project_Sprint_5/")
#Loading libraries and reading the CSV file "us_contagious_diseases into R.
#Loading the library dplyr in order for the
library(dplyr)
#Loading the library ggplot2
library(ggplot2)
#Loading the library plyr in order to use the ddply() function
library("plyr")
#Creating the variable "sick" to represent the ""us_contagious_diseases.csv""
#which was pulled from the Internet
sick <- read.csv("us_contagious_diseases.csv")
#calculating the percentage of people that are sick for that particular disease per the population
sick <- transform(sick, percentage_sick = count / population)
#turning the year column of integers into a column that contains R categories (called factors)
#Don't know for sure if I need to do this or not yet...
#sick$year <- integer(sick$year, ordered = TRUE)
#If I wanted to know the highest year in the dataset
highest_year <- max(sick$year)
#If I wanted to know the highest counts of diseases in the dataset
highest_count <- max(sick$count)
#If I wanted to know the highest percentage_sick that is found in the data set.
#Also needed to do the na.rm=True in order for it to work
highest_percentage_sick <- max(sick$percentage_sick, na.rm = TRUE)
#Filter out all of the NA's for the percentage_sick
filter(sick, !is.na(percentage_sick))
#Create a new variable called "Sicker" that only has the percentage_sick values without any NA's
Sicker <- filter(sick, !is.na(percentage_sick))
#Calculate the top disease per State (by the highest percentage_sick)
States_highest_sick <- ddply(Sicker, 'state', function(x) x[x$percentage_sick==max(x$percentage_sick),])
#View the top disease per State and show the percentage_sick
View(States_highest_sick)
View(sick)
View(highest_percentage_sick)
View(States_highest_sick)
